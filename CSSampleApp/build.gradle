plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'org.jetbrains.kotlin.plugin.compose'
    id 'com.contentsquare.error.analysis.network'
    id 'com.contentsquare.error.analysis.crash'
}

android {
    compileSdk 35
    defaultConfig {
        applicationId "com.example.androidsampleapp"
        minSdk 21
        targetSdk 35
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            // Set credentials from different source, fallback on Github CI --> see android-ci.yml
//            def localProperties = getLocalProperties()
            // from gradle.properties
            def projectIdFromGradleFile = project.findProperty("PROD_SAMPLE_PROJECT_ID")?.toInteger() ?:
                    System.getenv("PROD_SAMPLE_PROJECT_ID")?.toInteger()
            // from local.properties
            def clientIdFromLocal = getLocalProperty("PROD_MAPPING_UPLOAD_CLIENT_ID") ?: System.getenv("PROD_MAPPING_UPLOAD_CLIENT_ID")
//            if (localProperties != null) localProperties.getProperty("PROD_MAPPING_UPLOAD_CLIENT_ID", "") else
//                System.getenv("PROD_MAPPING_UPLOAD_CLIENT_ID")
            // from environment variable, is the same than Github CI here
            def clientSecretFromEnv = System.getenv("PROD_MAPPING_UPLOAD_CLIENT_SECRET") ?: ""
            println("project id = ${projectIdFromGradleFile} client id = ${clientIdFromLocal} client secret = ${clientSecretFromEnv}")
            errorAnalysisCrash {
                uploadCredentials {
                    // from gradle.properties
                    projectId = projectIdFromGradleFile
                    // from local.properties
                    clientId = clientIdFromLocal
                    // from environment variable, is the same than Github CI here
                    clientSecret = clientSecretFromEnv
                }
            }
        }
    }

    buildFeatures {
        viewBinding = true
        compose = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = '11'
    }
    packaging {
        resources {
            it.excludes += '/META-INF/{AL2.0,LGPL2.1}'
            it.excludes += '/META-INF/DEPENDENCIES'
        }
    }
    namespace 'com.example.androidsampleapp'
}

dependencies {
    implementation 'com.contentsquare.android:library:4.32.1'
    implementation 'com.contentsquare.android:compose:4.32.1'

    implementation 'androidx.core:core-ktx:1.13.1'
    implementation 'androidx.appcompat:appcompat:1.7.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'com.google.android.material:material:1.12.0'
    implementation 'androidx.viewpager2:viewpager2:1.1.0'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.8.1'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.8.4'

    // OkHTTP
    implementation platform('com.squareup.okhttp3:okhttp-bom:4.12.0')
    implementation 'com.squareup.okhttp3:okhttp'
    implementation 'com.squareup.okhttp3:logging-interceptor'
    implementation 'com.squareup.okhttp3:mockwebserver:4.12.0'

    // Compose
    implementation platform('androidx.compose:compose-bom:2024.08.00')
    implementation 'androidx.compose.material:material'
    implementation 'androidx.activity:activity-compose:1.9.1'
    implementation 'androidx.compose.ui:ui-tooling-preview'
    debugImplementation 'androidx.compose.ui:ui-tooling'

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.2.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.6.1'
}

def getLocalProperty(clientIdProp) {
    def localProperties = new Properties()
    def localPropertiesFile = rootProject.file("local.properties")
    if (localPropertiesFile.exists()) {
        localProperties.load(new FileInputStream(localPropertiesFile))
        return localProperties.getProperty(clientIdProp)
    }
    return null
}